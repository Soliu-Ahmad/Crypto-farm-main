// function LineKit(stream: NodeJS.ReadStream,
//                  eachFunc: LineFunction,
//                  finalFunc?: WrapFunction,
//                  preFunc?: WrapFunction) {
//     if (preFunc) { preFunc() }
//     let theLine = '';
//     let ended = false;
//     stream.on('readable', () => {
//         while(stream.readable && !ended) {
//             stream.read(0)
//             let nextChar = stream.read(1);
//             if (nextChar == '\n') {
//                 eachFunc(theLine);
//                 theLine = '';
//             } else if (nextChar == null) {
//                 console.log('NULL TSB.')
//                 ended = true;
//                 if (finalFunc) { finalFunc(); break; }
//                 break;
//             } else {
//                 theLine += nextChar;
//             }
//         }
//     });
// }
// use flow
function LineKit(stream, eachFunc, finalFunc, preFunc) {
    if (preFunc) {
        preFunc();
    }
    var theLine = '';
    var ended = false;
    stream.on('data', function (chunk) {
        var chunkStr = chunk.toString();
        for (var idx = 0; idx < chunkStr.length; idx++) {
            var nextChar = chunkStr[idx];
            if (nextChar == '\n') {
                eachFunc(theLine);
                theLine = '';
            }
            else {
                theLine += nextChar;
            }
        }
    });
    stream.on('end', function () {
        if (finalFunc) {
            finalFunc();
        }
    });
}
module.exports = LineKit;
if (module == require.main) {
    var fs = require('fs');
    if (process.argv.length != 3 || fs.exists(process.argv[2])) {
        process.exit(1);
    }
    var freqs_1 = {};
    LineKit(fs.createReadStream(process.argv[2]), function (line) {
        if (line in freqs_1) {
            freqs_1[line]++;
        }
        else {
            freqs_1[line] = 1;
        }
    }, function () {
        var max = 0;
        var maxName = '';
        var min = -1;
        var minName = '';
        for (var name_1 in freqs_1) {
            console.log(name_1 + " , " + freqs_1[name_1]);
            if (min == -1) {
                min = freqs_1[name_1];
                minName = name_1;
            }
            if (freqs_1[name_1] > max) {
                max = freqs_1[name_1];
                maxName = name_1;
            }
            if (freqs_1[name_1] < min) {
                min = freqs_1[name_1];
                minName = name_1;
            }
        }
        console.log("\n?? TOTAL UNIQ:" + Object.keys(freqs_1).length);
        console.log("\n?^ MAX " + maxName + ":" + freqs_1[maxName]);
        console.log("\n?^ MIN " + minName + ":" + freqs_1[minName]);
        console.log('DONE.');
    });
}
